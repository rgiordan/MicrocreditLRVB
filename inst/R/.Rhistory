###########################
# Summarize results
# Pack the standard deviations into readable forms.
mfvb_sd <- GetMomentsFromVector(mp_opt, sqrt(diag(mfvb_cov)))
lrvb_sd <- GetMomentsFromVector(mp_opt, sqrt(diag(lrvb_cov)))
results_vb <- SummarizeMomentParameters(mp_opt, mfvb_sd, lrvb_sd)
results_vb_pert <- SummarizeMomentParameters(mp_opt_pert, mfvb_sd, lrvb_sd)
results_vb_pert$method <- "mfvb_perturbed"
results_mcmc <- SummarizeMCMCResults(fit_env$stan_results$mcmc_sample)
results_mcmc_pert <- SummarizeMCMCResults(fit_env$stan_results$mcmc_sample_perturbed)
results_mcmc_pert$method <- "mcmc_perturbed"
results <- rbind(results_vb, results_mcmc)
result_pert <- rbind(results_vb, results_vb_pert, results_mcmc, results_mcmc_pert)
##########################################
# Get MCMC sensitivity measures
mcmc_sample <- fit_env$stan_results$mcmc_sample
draws_mat <- fit_env$stan_results$draws_mat
mp_draws <- PackMCMCSamplesIntoMoments(mcmc_sample, mp_opt) # A little slow
log_prior_grad_list <- GetMCMCLogPriorDerivatives(mp_draws, pp)
log_prior_grad_mat <- do.call(rbind, log_prior_grad_list)
#######################
# Prior sensitivity results with respect to a particular prior parameter.
# TODO: use these after you've fixed the LKJ prior
# draws_mat <- fit_env$stan_results$draws_mat
# log_prior_grad_mat <- fit_env$stan_results$log_prior_grad_mat
# Note: the LKJ alpha and beta are looking suspicious.
#prior_sensitivity_ind <- pp_indices$mu_info[1, 2]; ind_name <- "mu_info_offdiag_sens"
#prior_sensitivity_ind <- pp_indices$mu_info[1, 1]; ind_name <- "mu_info_diag_sens"
#prior_sensitivity_ind <- pp_indices$lambda_eta; ind_name <- "lambda_eta"
#prior_sensitivity_ind <- pp_indices$lambda_alpha; ind_name <- "lambda_alpha"
prior_sensitivity_ind <- pp_indices$lambda_beta; ind_name <- "lambda_beta"
#prior_sensitivity_ind <- pp_indices$tau_alpha; ind_name <- "tau_alpha"
#prior_sensitivity_ind <- pp_indices$tau_alpha; ind_name <- "tau_beta"
#prior_sensitivity_ind <- pp_indices$mu_loc[1]; ind_name <- "mu_loc_1"
mcmc_subset_size <- 1000
mcmc_prior_sens_subset <- cov(draws_mat[1:mcmc_subset_size, ],
log_prior_grad_mat[1:mcmc_subset_size, ])
mcmc_prior_sens <- cov(draws_mat, log_prior_grad_mat)
vb_prior_sens_mom <- GetMomentsFromVector(mp_opt, prior_sens[, prior_sensitivity_ind])
mcmc_prior_sens_mom <- GetMomentsFromVector(mp_opt, mcmc_prior_sens[, prior_sensitivity_ind])
mcmc_prior_sens_subset <- GetMomentsFromVector(mp_opt, mcmc_prior_sens_subset[, prior_sensitivity_ind])
prior_sens_results <-
rbind(SummarizeRawMomentParameters(vb_prior_sens_mom, metric=ind_name, method="lrvb") %>%
mutate(draws=""),
SummarizeRawMomentParameters(mcmc_prior_sens_mom, metric=ind_name, method="mcmc") %>%
mutate(draws=nrow(draws_mat)),
SummarizeRawMomentParameters(mcmc_prior_sens_subset, metric=ind_name, "mcmc") %>%
mutate(draws=mcmc_subset_size)
)
prior_sens_results_graph <-
inner_join(
filter(prior_sens_results, method == "lrvb") %>%
dcast(par + component + group + metric ~ method, value.var="val"),
filter(prior_sens_results, method == "mcmc") %>%
dcast(par + component + group + metric + draws ~ method, value.var="val"),
by=c("par", "component", "group", "metric"))
ggplot(prior_sens_results_graph) +
geom_point(aes(x=lrvb, y=mcmc, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0)) +
facet_grid(~ draws) +
ggtitle(paste("Local sensitivity to", ind_name,
"as measured by VB and MCMC, grouped by # of MCMC draws"))
#######################
# Graphs
stop("Graphs follow -- not executing.")
mean_results <-
filter(results, metric == "mean") %>%
dcast(par + component + group ~ method, value.var="val")
ggplot(filter(mean_results, par != "mu_g")) +
geom_point(aes(x=mcmc, y=mfvb, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_results, par == "mu_g")) +
geom_point(aes(x=mcmc, y=mfvb, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_results, par == "tau")) +
geom_point(aes(x=mcmc, y=mfvb, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_results, par == "lambda")) +
geom_point(aes(x=mcmc, y=mfvb, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
sd_results <-
filter(results, metric == "sd") %>%
dcast(par + component + group ~ method, value.var="val")
ggplot(filter(sd_results, par != "mu_g")) +
geom_point(aes(x=mcmc, y=mfvb, shape=par, color="mfvb"), size=3) +
geom_point(aes(x=mcmc, y=lrvb, shape=par, color="lrvb"), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(sd_results, par == "mu_g")) +
geom_point(aes(x=mcmc, y=mfvb, shape=par, color="mfvb"), size=3) +
geom_point(aes(x=mcmc, y=lrvb, shape=par, color="lrvb"), size=3) +
geom_abline(aes(slope=1, intercept=0))
###################
# Perturbations
mean_pert_results <-
filter(result_pert, metric == "mean") %>%
dcast(par + component + group ~ method, value.var="val") %>%
mutate(mfvb_diff = mfvb_perturbed - mfvb, mcmc_diff = mcmc_perturbed - mcmc)
ggplot(filter(mean_pert_results, par != "mu_g")) +
geom_point(aes(x=mcmc_diff, y=mfvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_pert_results, par == "mu_g")) +
geom_point(aes(x=mcmc_diff, y=mfvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
# Calculate vb perturbed estimates
mp_opt_vec <- GetVectorFromMoments(mp_opt)
if (analysis_name == "simulated_data_lambda_beta") {
vb_sens_vec <- prior_sens[, pp_indices$lambda_beta]
} else {
vb_sens_vec <- prior_sens[, pp_indices$mu_info[1, 2]]
}
mp_opt_vec_pert <- mp_opt_vec + stan_results$perturb_epsilon * vb_sens_vec
mp_opt_pert <- GetMomentsFromVector(mp_opt, mp_opt_vec_pert)
# Pack the standard deviations into readable forms.
mfvb_sd <- GetMomentsFromVector(mp_opt, sqrt(diag(mfvb_cov)))
lrvb_sd <- GetMomentsFromVector(mp_opt, sqrt(diag(lrvb_cov)))
results_vb <- SummarizeMomentParameters(mp_opt, mfvb_sd, lrvb_sd)
results_vb_pert <- SummarizeMomentParameters(mp_opt_pert, mfvb_sd, lrvb_sd)
results_vb_pert$method <- "mfvb_perturbed"
results_mcmc <- SummarizeMCMCResults(fit_env$stan_results$mcmc_sample)
results_mcmc_pert <- SummarizeMCMCResults(fit_env$stan_results$mcmc_sample_perturbed)
results_mcmc_pert$method <- "mcmc_perturbed"
results <- rbind(results_vb, results_mcmc)
result_pert <- rbind(results_vb, results_vb_pert, results_mcmc, results_mcmc_pert)
##########################################
# Get MCMC sensitivity measures
mcmc_sample <- fit_env$stan_results$mcmc_sample
draws_mat <- fit_env$stan_results$draws_mat
mp_draws <- PackMCMCSamplesIntoMoments(mcmc_sample, mp_opt) # A little slow
log_prior_grad_list <- GetMCMCLogPriorDerivatives(mp_draws, pp)
log_prior_grad_mat <- do.call(rbind, log_prior_grad_list)
prior_sensitivity_ind <- pp_indices$lambda_beta; ind_name <- "lambda_beta"
#prior_sensitivity_ind <- pp_indices$tau_alpha; ind_name <- "tau_alpha"
#prior_sensitivity_ind <- pp_indices$tau_alpha; ind_name <- "tau_beta"
#prior_sensitivity_ind <- pp_indices$mu_loc[1]; ind_name <- "mu_loc_1"
mcmc_subset_size <- 1000
mcmc_prior_sens_subset <- cov(draws_mat[1:mcmc_subset_size, ],
log_prior_grad_mat[1:mcmc_subset_size, ])
mcmc_prior_sens <- cov(draws_mat, log_prior_grad_mat)
vb_prior_sens_mom <- GetMomentsFromVector(mp_opt, prior_sens[, prior_sensitivity_ind])
mcmc_prior_sens_mom <- GetMomentsFromVector(mp_opt, mcmc_prior_sens[, prior_sensitivity_ind])
mcmc_prior_sens_subset <- GetMomentsFromVector(mp_opt, mcmc_prior_sens_subset[, prior_sensitivity_ind])
prior_sens_results <-
rbind(SummarizeRawMomentParameters(vb_prior_sens_mom, metric=ind_name, method="lrvb") %>%
mutate(draws=""),
SummarizeRawMomentParameters(mcmc_prior_sens_mom, metric=ind_name, method="mcmc") %>%
mutate(draws=nrow(draws_mat)),
SummarizeRawMomentParameters(mcmc_prior_sens_subset, metric=ind_name, "mcmc") %>%
mutate(draws=mcmc_subset_size)
)
prior_sens_results_graph <-
inner_join(
filter(prior_sens_results, method == "lrvb") %>%
dcast(par + component + group + metric ~ method, value.var="val"),
filter(prior_sens_results, method == "mcmc") %>%
dcast(par + component + group + metric + draws ~ method, value.var="val"),
by=c("par", "component", "group", "metric"))
ggplot(prior_sens_results_graph) +
geom_point(aes(x=lrvb, y=mcmc, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0)) +
facet_grid(~ draws) +
ggtitle(paste("Local sensitivity to", ind_name,
"as measured by VB and MCMC, grouped by # of MCMC draws"))
mean_results <-
filter(results, metric == "mean") %>%
dcast(par + component + group ~ method, value.var="val")
ggplot(filter(mean_results, par != "mu_g")) +
geom_point(aes(x=mcmc, y=mfvb, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
mean_pert_results <-
filter(result_pert, metric == "mean") %>%
dcast(par + component + group ~ method, value.var="val") %>%
mutate(mfvb_diff = mfvb_perturbed - mfvb, mcmc_diff = mcmc_perturbed - mcmc)
ggplot(filter(mean_pert_results, par != "mu_g")) +
geom_point(aes(x=mcmc_diff, y=mfvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
stan_results$pp_perturb
analysis_name <- "simulated_data_lambda_beta"
project_directory <-
file.path(Sys.getenv("GIT_REPO_LOC"), "MicrocreditLRVB/inst/simulated_data")
stan_draws_file <-
file.path(project_directory, paste(analysis_name, "_mcmc_draws.Rdata", sep=""))
print(paste("Loading draws from ", stan_draws_file))
stan_results <- environment()
load(stan_draws_file, envir=stan_results)
stan_results <- as.list(stan_results)
library(ggplot2)
library(dplyr)
library(reshape2)
library(rstan)
library(Matrix)
library(MicrocreditLRVB)
# Load previously computed Stan results
#analysis_name <- "simulated_data_robust"
#analysis_name <- "simulated_data_nonrobust"
analysis_name <- "simulated_data_lambda_beta"
project_directory <-
file.path(Sys.getenv("GIT_REPO_LOC"), "MicrocreditLRVB/inst/simulated_data")
stan_draws_file <-
file.path(project_directory, paste(analysis_name, "_mcmc_draws.Rdata", sep=""))
print(paste("Loading draws from ", stan_draws_file))
stan_results <- environment()
load(stan_draws_file, envir=stan_results)
stan_results <- as.list(stan_results)
x <- stan_results$stan_dat$x
y <- stan_results$stan_dat$y
y_g <- stan_results$stan_dat$y_group
#############################
# Initialize
# "reg" for "regression"
vp_reg <- InitializeVariationalParameters(
x, y, y_g, mu_diag_min=0.01, lambda_diag_min=1e-5, tau_min=1, lambda_n_min=0.5)
mp_reg <- GetMoments(vp_reg)
#########################################
# Fit and LRVB
vb_fit <- FitVariationalModel(x, y, y_g, vp_reg, pp)
vb_fit_perturb <- FitVariationalModel(x, y, y_g, vp_reg, stan_results$pp_perturb)
print(vb_fit$bfgs_time + vb_fit$tr_time)
vp_opt <- vb_fit$vp_opt
lrvb_terms <- GetLRVB(x, y, y_g, vp_opt, pp)
prior_sens <- GetSensitivity(vp_opt, pp, lrvb_terms$jac, lrvb_terms$elbo_hess)
##########################################
# Get MCMC sensitivity measures
mcmc_sample <- extract(stan_results$stan_sim)
stan_results$pp_perturb
library(ggplot2)
library(dplyr)
library(reshape2)
library(rstan)
library(Matrix)
library(MicrocreditLRVB)
project_directory <-
file.path(Sys.getenv("GIT_REPO_LOC"), "MicrocreditLRVB/inst/simulated_data")
# library_location <- file.path(Sys.getenv("GIT_REPO_LOC"), "MicrocreditLRVB/")
# source(file.path(library_location, "inst/R/microcredit_stan_lib.R"))
# Choose one.
#analysis_name <- "simulated_data_nonrobust"
#analysis_name <- "simulated_data_robust"
analysis_name <- "simulated_data_lambda_beta"
set.seed(42)
##########################
# Prior parameters
# The dimension of the regressors.
k <- 2
pp <- GetEmptyPriors(k)
pp[["mu_loc"]] <- rep(0, k)
mu_prior_sd <- 3
pp[["mu_info"]] <- matrix(c(mu_prior_sd ^ -2, 0., 0, mu_prior_sd ^ -2), k, k)
pp[["lambda_eta"]] <- 15.01
pp[["lambda_alpha"]] <- 20.01
pp[["lambda_beta"]] <- 20.01
pp[["tau_alpha"]] <- 2.01
pp[["tau_beta"]] <- 2.01
#############################
# Simualate some data
true_params <- list()
# Set parameters similar to the microcredit data.  Note that the true mean is
# an unlikely value relative to the prior.  This will result in a non-robust
# posterior.
if (analysis_name == "simulated_data_nonrobust") {
true_params$true_mu <- c(4 * mu_prior_sd, -4 * mu_prior_sd)
} else {
true_params$true_mu <- c(1 * mu_prior_sd, -1 * mu_prior_sd)
}
true_params$true_sigma <- matrix(c(12, 0, 0, 12), 2, 2)
true_params$true_lambda <- solve(true_params$true_sigma)
true_params$true_tau <- 1e-2
# Number of groups
n_g <- 30
# Number of data points per group
n_per_group <- 100
sim_data <- SimulateData(true_params, n_g, n_per_group)
x <- sim_data$x
y_g <- sim_data$y_g
y <- sim_data$y
true_params$true_mu_g <- sim_data$true_mu_g
# Sanity checks
mu_g_mat <- do.call(rbind, true_params$true_mu_g)
cov(mu_g_mat)
solve(true_params$true_lambda)
######################################
# STAN
# Load the STAN model
stan_directory <-
file.path(Sys.getenv("GIT_REPO_LOC"), "MicrocreditLRVB/inst/stan")
stan_model_name <- "basic_hierarchical_model_lkj_priors"
model_file_rdata <-
file.path(stan_directory, paste(stan_model_name, "Rdata", sep="."))
if (file.exists(model_file_rdata)) {
print("Loading pre-compiled Stan model.")
load(model_file_rdata)
} else {
print("Compiling Stan model.")
model_file <-
file.path(stan_directory, paste(stan_model_name, "stan", sep="."))
model <- stan_model(model_file)
save(model, file=model_file_rdata)
}
# Perturb the prior.
pp_perturb <- pp
if (analysis_name == "simulated_data_lambda_beta") {
perturb_epsilon <- 1.0
pp_perturb$lambda_beta <- pp_perturb$lambda_beta + perturb_epsilon
} else {
perturb_epsilon <- 0.05
mu_prior_info_perturb <- pp$mu_info
mu_prior_info_perturb[1,2] <- mu_prior_info_perturb[2,1] <-
mu_prior_info_perturb[1,2] + perturb_epsilon
pp_perturb$mu_info <- mu_prior_info_perturb
}
# Stan data.
SetStanDat <- function(prior_params) {
list(NG = n_g,
N = length(y),
K = ncol(x),
y_group = y_g,
y = y,
x = x,
mu_prior_sigma = solve(prior_params$mu_info),
mu_prior_mean = prior_params$mu_loc,
use_mu1_prior = FALSE,
mu1_prior_sigma = solve(prior_params$mu_info),
mu1_prior_mean = prior_params$mu_loc,
scale_prior_alpha = prior_params$lambda_alpha,
scale_prior_beta = prior_params$lambda_beta,
lkj_prior_eta = prior_params$lambda_eta,
tau_prior_alpha = prior_params$tau_alpha,
tau_prior_beta = prior_params$tau_beta)
}
stan_dat <- SetStanDat(pp)
stan_dat_perturbed <- SetStanDat(pp_perturb)
# Some knobs we can tweak.  Note that we need many iterations to accurately assess
# the prior sensitivity in the MCMC noise.
chains <- 1
iters <- 10000
seed <- 42
# Note: this takes a while.
stan_draws_file <-
file.path(project_directory, paste(analysis_name, "_mcmc_draws.Rdata", sep=""))
mcmc_time <- Sys.time()
stan_sim <- sampling(model, data=stan_dat, seed=seed, chains=chains, iter=iters)
mcmc_time <- Sys.time() - mcmc_time
stan_sim_perturb <- sampling(model, data=stan_dat_perturbed, seed=seed, chains=chains, iter=iters)
stan_advi <- vb(model, data =stan_dat,  algorithm="meanfield", output_samples=iters)
stan_advi_perturb <- vb(model, data=stan_dat_perturbed,  algorithm="meanfield", output_samples=iters)
stan_advi_full <- vb(model, data=stan_dat,  algorithm="fullrank", output_samples=iters)
stan_advi_full_perturb <- vb(model, data=stan_dat_perturbed,  algorithm="meanfield", output_samples=iters)
save(stan_sim, stan_sim_perturb, mcmc_time, perturb_epsilon,
stan_dat, stan_dat_perturbed, true_params, pp, pp_perturb,
stan_advi, stan_advi_perturb, stan_advi_full, stan_advi_full_perturb,
file=stan_draws_file)
library(ggplot2)
library(dplyr)
library(reshape2)
library(rstan)
library(Matrix)
library(MicrocreditLRVB)
# Load previously computed Stan results
#analysis_name <- "simulated_data_robust"
#analysis_name <- "simulated_data_nonrobust"
analysis_name <- "simulated_data_lambda_beta"
project_directory <-
file.path(Sys.getenv("GIT_REPO_LOC"), "MicrocreditLRVB/inst/simulated_data")
stan_draws_file <-
file.path(project_directory, paste(analysis_name, "_mcmc_draws.Rdata", sep=""))
print(paste("Loading draws from ", stan_draws_file))
stan_results <- environment()
load(stan_draws_file, envir=stan_results)
stan_results <- as.list(stan_results)
x <- stan_results$stan_dat$x
y <- stan_results$stan_dat$y
y_g <- stan_results$stan_dat$y_group
#############################
# Initialize
# "reg" for "regression"
vp_reg <- InitializeVariationalParameters(
x, y, y_g, mu_diag_min=0.01, lambda_diag_min=1e-5, tau_min=1, lambda_n_min=0.5)
mp_reg <- GetMoments(vp_reg)
#########################################
# Fit and LRVB
vb_fit <- FitVariationalModel(x, y, y_g, vp_reg, pp)
vb_fit_perturb <- FitVariationalModel(x, y, y_g, vp_reg, stan_results$pp_perturb)
FitVariationalModel
vb_fit_perturb <- FitVariationalModel(x, y, y_g, vp_fit, stan_results$pp_perturb)
vp_opt <- vb_fit$vp_opt
vb_fit_perturb <- FitVariationalModel(x, y, y_g, vp_opt, stan_results$pp_perturb)
lrvb_terms <- GetLRVB(x, y, y_g, vp_opt, pp)
prior_sens <- GetSensitivity(vp_opt, pp, lrvb_terms$jac, lrvb_terms$elbo_hess)
save(stan_results, vb_fit, vb_fit_perturb, lrvb_terms, prior_sens, file=fit_file)
lrvb_terms <- GetLRVB(x, y, y_g, vp_opt, pp)
prior_sens <- GetSensitivity(vp_opt, pp, lrvb_terms$jac, lrvb_terms$elbo_hess)
##########################################
# Get MCMC sensitivity measures
mcmc_sample <- extract(stan_results$stan_sim)
mcmc_sample_perturbed <- extract(stan_results$stan_sim_perturb)
mp_draws <- PackMCMCSamplesIntoMoments(mcmc_sample, mp_reg) # A little slow
draws_mat <- do.call(rbind, lapply(mp_draws, GetVectorFromMoments))
log_prior_grad_list <- GetMCMCLogPriorDerivatives(mp_draws, pp)
log_prior_grad_mat <- do.call(rbind, log_prior_grad_list)
stan_results$mp_draws <- mp_draws
stan_results$draws_mat <- draws_mat
stan_results$log_prior_grad_mat <- log_prior_grad_mat
stan_results$mcmc_sample_perturbed <- mcmc_sample_perturbed
stan_results$mcmc_sample <- mcmc_sample
###########################################
# Save fits
fit_file <- file.path(project_directory, paste(analysis_name, "_mcmc_and_vb.Rdata", sep=""))
print(paste("Saving fits to ", fit_file))
save(stan_results, vb_fit, vb_fit_perturb, lrvb_terms, prior_sens, file=fit_file)
source('~/Documents/git_repos/MicrocreditLRVB/inst/R/microcredit_parameter_sensitivity.R', echo=TRUE)
log_prior_grad_mat <- fit_env$stan_results$log_prior_grad_mat
mcmc_subset_size <- 1000
mcmc_prior_sens_subset <- cov(draws_mat[1:mcmc_subset_size, ],
log_prior_grad_mat[1:mcmc_subset_size, ])
mcmc_prior_sens <- cov(draws_mat, log_prior_grad_mat)
vb_prior_sens_mom <- GetMomentsFromVector(mp_opt, prior_sens[, prior_sensitivity_ind])
mcmc_prior_sens_mom <- GetMomentsFromVector(mp_opt, mcmc_prior_sens[, prior_sensitivity_ind])
mcmc_prior_sens_subset <- GetMomentsFromVector(mp_opt, mcmc_prior_sens_subset[, prior_sensitivity_ind])
prior_sens_results <-
rbind(SummarizeRawMomentParameters(vb_prior_sens_mom, metric=ind_name, method="lrvb") %>%
mutate(draws=""),
SummarizeRawMomentParameters(mcmc_prior_sens_mom, metric=ind_name, method="mcmc") %>%
mutate(draws=nrow(draws_mat)),
SummarizeRawMomentParameters(mcmc_prior_sens_subset, metric=ind_name, "mcmc") %>%
mutate(draws=mcmc_subset_size)
)
prior_sens_results_graph <-
inner_join(
filter(prior_sens_results, method == "lrvb") %>%
dcast(par + component + group + metric ~ method, value.var="val"),
filter(prior_sens_results, method == "mcmc") %>%
dcast(par + component + group + metric + draws ~ method, value.var="val"),
by=c("par", "component", "group", "metric"))
ggplot(prior_sens_results_graph) +
geom_point(aes(x=lrvb, y=mcmc, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0)) +
facet_grid(~ draws) +
ggtitle(paste("Local sensitivity to", ind_name,
"as measured by VB and MCMC, grouped by # of MCMC draws"))
vp_opt_pert <- fit_env$vb_fit_perturb$vp_opt
mp_opt_pert <- GetMoments(vp_opt_pert)
pp_perturb <- fit_env$stan_results$pp_perturb
lrvb_terms_pert <- GetLRVB(x, y, y_g, vp_opt_pert, pp_perturb)
prior_sens_pert <- GetSensitivity(vp_opt_pert, pp_perturb, lrvb_terms_pert$jac, lrvb_terms_pert$elbo_hess)
mp_opt_lrvb_pert <- GetMomentsFromVector(mp_opt, mp_opt_vec_pert)
# Pack the standard deviations into readable forms.
mfvb_sd <- GetMomentsFromVector(mp_opt, sqrt(diag(mfvb_cov)))
lrvb_sd <- GetMomentsFromVector(mp_opt, sqrt(diag(lrvb_cov)))
results_lrvb <- SummarizeMomentParameters(mp_opt, mfvb_sd, lrvb_sd)
results_lrvb_pert <- SummarizeMomentParameters(mp_opt_lrvb_pert, mfvb_sd, lrvb_sd)
results_lrvb_pert$method <- "lrvb_perturbed"
# Get the VB result from manually perturbing and refitting
vp_opt_pert <- fit_env$vb_fit_perturb$vp_opt
mp_opt_pert <- GetMoments(vp_opt_pert)
pp_perturb <- fit_env$stan_results$pp_perturb
lrvb_terms_pert <- GetLRVB(x, y, y_g, vp_opt_pert, pp_perturb)
prior_sens_pert <- GetSensitivity(vp_opt_pert, pp_perturb, lrvb_terms_pert$jac, lrvb_terms_pert$elbo_hess)
results_vb <- SummarizeMomentParameters(mp_opt, mfvb_sd, lrvb_sd)
results_vb_pert <- SummarizeMomentParameters(mp_opt_pert, mfvb_sd, lrvb_sd)
results_vb_pert$method <- "mfvb_perturbed"
result_pert <- rbind(results_vb, results_lrvb_pert, results_vb_pert, results_mcmc, results_mcmc_pert)
mean_pert_results <-
filter(result_pert, metric == "mean") %>%
dcast(par + component + group ~ method, value.var="val") %>%
mutate(mfvb_diff = mfvb_perturbed - mfvb, mcmc_diff = mcmc_perturbed - mcmc)
ggplot(filter(mean_pert_results, par != "mu_g")) +
geom_point(aes(x=mcmc_diff, y=mfvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_pert_results, par == "mu_g")) +
geom_point(aes(x=mcmc_diff, y=mfvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
mean_pert_results <-
filter(result_pert, metric == "mean") %>%
dcast(par + component + group ~ method, value.var="val") %>%
mutate(mfvb_diff = mfvb_perturbed - mfvb,
lrvb_diff = lrvb_perturbed - mfvb,
mcmc_diff = mcmc_perturbed - mcmc)
ggplot(filter(mean_pert_results, par != "mu_g")) +
geom_point(aes(x=mcmc_diff, y=lrvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_pert_results, par == "mu_g")) +
geom_point(aes(x=mcmc_diff, y=lrvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_pert_results, par != "mu_g")) +
geom_point(aes(x=mcmc_diff, y=mfvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_pert_results, par == "mu_g")) +
geom_point(aes(x=mcmc_diff, y=mfvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
# LRVB predicted vs actual change.  This should be spot on.
ggplot(filter(mean_pert_results, par != "mu_g")) +
geom_point(aes(x=mfvb_diff, y=lrvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_pert_results, par == "mu_g")) +
geom_point(aes(x=mfvb_diff, y=lrvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_pert_results, par != "mu_g")) +
geom_point(aes(x=mcmc_perturbed, y=mfvb_perturbed, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_pert_results, par == "mu_g")) +
geom_point(aes(x=mcmc_perturbed, y=mfvb_perturbed, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
# LRVB predicted vs actual change.  This should be spot on.
ggplot(filter(mean_pert_results, par != "mu_g")) +
geom_point(aes(x=mfvb_diff, y=lrvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
ggplot(filter(mean_pert_results, par == "mu_g")) +
geom_point(aes(x=mfvb_diff, y=lrvb_diff, color=par), size=3) +
geom_abline(aes(slope=1, intercept=0))
mcmc_time
fit_env$vb_fit$bfgs_time
fit_env$vb_fit$tr_time
1.8 * 60
