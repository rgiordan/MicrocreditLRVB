// Code generated by Stan version 2.12

#include <stan/model/model_header.hpp>

namespace hierarchical_model_spike_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class hierarchical_model_spike_model : public prob_grad {
private:
    int NG;
    int K;
    vector_d num_obs;
    vector_d yty;
    vector<vector_d> ytx;
    vector<matrix_d> xtx;
    vector<vector_d> num_zeros;
    vector_d beta_prior_mean;
    matrix_d beta_prior_sigma;
    double tau_prior_alpha;
    double tau_prior_beta;
    double scale_prior_alpha;
    double scale_prior_beta;
    double lkj_prior_eta;
public:
    hierarchical_model_spike_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    hierarchical_model_spike_model(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "hierarchical_model_spike_model_namespace::hierarchical_model_spike_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "NG", "int", context__.to_vec());
        NG = int(0);
        vals_i__ = context__.vals_i("NG");
        pos__ = 0;
        NG = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        validate_non_negative_index("num_obs", "NG", NG);
        num_obs = vector_d(static_cast<Eigen::VectorXd::Index>(NG));
        context__.validate_dims("data initialization", "num_obs", "vector_d", context__.to_vec(NG));
        vals_r__ = context__.vals_r("num_obs");
        pos__ = 0;
        size_t num_obs_i_vec_lim__ = NG;
        for (size_t i_vec__ = 0; i_vec__ < num_obs_i_vec_lim__; ++i_vec__) {
            num_obs[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("yty", "NG", NG);
        yty = vector_d(static_cast<Eigen::VectorXd::Index>(NG));
        context__.validate_dims("data initialization", "yty", "vector_d", context__.to_vec(NG));
        vals_r__ = context__.vals_r("yty");
        pos__ = 0;
        size_t yty_i_vec_lim__ = NG;
        for (size_t i_vec__ = 0; i_vec__ < yty_i_vec_lim__; ++i_vec__) {
            yty[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ytx", "NG", NG);
        validate_non_negative_index("ytx", "K", K);
        ytx = std::vector<vector_d>(NG,vector_d(static_cast<Eigen::VectorXd::Index>(K)));
        context__.validate_dims("data initialization", "ytx", "vector_d", context__.to_vec(NG,K));
        vals_r__ = context__.vals_r("ytx");
        pos__ = 0;
        size_t ytx_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < ytx_i_vec_lim__; ++i_vec__) {
            size_t ytx_limit_0__ = NG;
            for (size_t i_0__ = 0; i_0__ < ytx_limit_0__; ++i_0__) {
                ytx[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "xtx", "matrix_d", context__.to_vec(NG,K,K));
        validate_non_negative_index("xtx", "NG", NG);
        validate_non_negative_index("xtx", "K", K);
        validate_non_negative_index("xtx", "K", K);
        xtx = std::vector<matrix_d>(NG,matrix_d(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K)));
        vals_r__ = context__.vals_r("xtx");
        pos__ = 0;
        size_t xtx_m_mat_lim__ = K;
        size_t xtx_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < xtx_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < xtx_m_mat_lim__; ++m_mat__) {
                size_t xtx_limit_0__ = NG;
                for (size_t i_0__ = 0; i_0__ < xtx_limit_0__; ++i_0__) {
                    xtx[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        validate_non_negative_index("num_zeros", "2", 2);
        validate_non_negative_index("num_zeros", "NG", NG);
        num_zeros = std::vector<vector_d>(2,vector_d(static_cast<Eigen::VectorXd::Index>(NG)));
        context__.validate_dims("data initialization", "num_zeros", "vector_d", context__.to_vec(2,NG));
        vals_r__ = context__.vals_r("num_zeros");
        pos__ = 0;
        size_t num_zeros_i_vec_lim__ = NG;
        for (size_t i_vec__ = 0; i_vec__ < num_zeros_i_vec_lim__; ++i_vec__) {
            size_t num_zeros_limit_0__ = 2;
            for (size_t i_0__ = 0; i_0__ < num_zeros_limit_0__; ++i_0__) {
                num_zeros[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("beta_prior_mean", "K", K);
        beta_prior_mean = vector_d(static_cast<Eigen::VectorXd::Index>(K));
        context__.validate_dims("data initialization", "beta_prior_mean", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("beta_prior_mean");
        pos__ = 0;
        size_t beta_prior_mean_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < beta_prior_mean_i_vec_lim__; ++i_vec__) {
            beta_prior_mean[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "beta_prior_sigma", "matrix_d", context__.to_vec(K,K));
        validate_non_negative_index("beta_prior_sigma", "K", K);
        validate_non_negative_index("beta_prior_sigma", "K", K);
        beta_prior_sigma = matrix_d(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
        vals_r__ = context__.vals_r("beta_prior_sigma");
        pos__ = 0;
        size_t beta_prior_sigma_k_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < beta_prior_sigma_k_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < beta_prior_sigma_k_mat_lim__; ++m_mat__) {
                beta_prior_sigma(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "tau_prior_alpha", "double", context__.to_vec());
        tau_prior_alpha = double(0);
        vals_r__ = context__.vals_r("tau_prior_alpha");
        pos__ = 0;
        tau_prior_alpha = vals_r__[pos__++];
        context__.validate_dims("data initialization", "tau_prior_beta", "double", context__.to_vec());
        tau_prior_beta = double(0);
        vals_r__ = context__.vals_r("tau_prior_beta");
        pos__ = 0;
        tau_prior_beta = vals_r__[pos__++];
        context__.validate_dims("data initialization", "scale_prior_alpha", "double", context__.to_vec());
        scale_prior_alpha = double(0);
        vals_r__ = context__.vals_r("scale_prior_alpha");
        pos__ = 0;
        scale_prior_alpha = vals_r__[pos__++];
        context__.validate_dims("data initialization", "scale_prior_beta", "double", context__.to_vec());
        scale_prior_beta = double(0);
        vals_r__ = context__.vals_r("scale_prior_beta");
        pos__ = 0;
        scale_prior_beta = vals_r__[pos__++];
        context__.validate_dims("data initialization", "lkj_prior_eta", "double", context__.to_vec());
        lkj_prior_eta = double(0);
        vals_r__ = context__.vals_r("lkj_prior_eta");
        pos__ = 0;
        lkj_prior_eta = vals_r__[pos__++];

        // validate data
        check_greater_or_equal(function__,"NG",NG,0);
        check_greater_or_equal(function__,"K",K,0);
        check_greater_or_equal(function__,"num_obs",num_obs,0);
        stan::math::check_cov_matrix(function__,"beta_prior_sigma",beta_prior_sigma);
        check_greater_or_equal(function__,"tau_prior_alpha",tau_prior_alpha,0);
        check_greater_or_equal(function__,"tau_prior_beta",tau_prior_beta,0);
        check_greater_or_equal(function__,"scale_prior_alpha",scale_prior_alpha,0);
        check_greater_or_equal(function__,"scale_prior_beta",scale_prior_beta,0);
        check_greater_or_equal(function__,"lkj_prior_eta",lkj_prior_eta,0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += NG * K;
        num_params_r__ += K;
        num_params_r__ += NG;
        num_params_r__ += ((K * (K - 1)) / 2);
        num_params_r__ += K;
    }

    ~hierarchical_model_spike_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta_group")))
            throw std::runtime_error("variable beta_group missing");
        vals_r__ = context__.vals_r("beta_group");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_group", "vector_d", context__.to_vec(K,NG));
        std::vector<vector_d> beta_group(K,vector_d(static_cast<Eigen::VectorXd::Index>(NG)));
        for (int j1__ = 0U; j1__ < NG; ++j1__)
            for (int i0__ = 0U; i0__ < K; ++i0__)
                beta_group[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < K; ++i0__)
            try {
            writer__.vector_unconstrain(beta_group[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_group: ") + e.what());
        }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta", "vector_d", context__.to_vec(K));
        vector_d beta(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("sigma_y")))
            throw std::runtime_error("variable sigma_y missing");
        vals_r__ = context__.vals_r("sigma_y");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_y", "double", context__.to_vec(NG));
        std::vector<double> sigma_y(NG,double(0));
        for (int i0__ = 0U; i0__ < NG; ++i0__)
            sigma_y[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < NG; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma_y[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_y: ") + e.what());
        }

        if (!(context__.contains_r("R")))
            throw std::runtime_error("variable R missing");
        vals_r__ = context__.vals_r("R");
        pos__ = 0U;
        context__.validate_dims("initialization", "R", "matrix_d", context__.to_vec(K,K));
        matrix_d R(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
        for (int j2__ = 0U; j2__ < K; ++j2__)
            for (int j1__ = 0U; j1__ < K; ++j1__)
                R(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.corr_matrix_unconstrain(R);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable R: ") + e.what());
        }

        if (!(context__.contains_r("S")))
            throw std::runtime_error("variable S missing");
        vals_r__ = context__.vals_r("S");
        pos__ = 0U;
        context__.validate_dims("initialization", "S", "vector_d", context__.to_vec(K));
        vector_d S(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            S(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,S);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable S: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > beta_group;
        size_t dim_beta_group_0__ = K;
        beta_group.reserve(dim_beta_group_0__);
        for (size_t k_0__ = 0; k_0__ < dim_beta_group_0__; ++k_0__) {
            if (jacobian__)
                beta_group.push_back(in__.vector_constrain(NG,lp__));
            else
                beta_group.push_back(in__.vector_constrain(NG));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta;
        (void) beta;  // dummy to suppress unused var warning
        if (jacobian__)
            beta = in__.vector_constrain(K,lp__);
        else
            beta = in__.vector_constrain(K);

        vector<T__> sigma_y;
        size_t dim_sigma_y_0__ = NG;
        sigma_y.reserve(dim_sigma_y_0__);
        for (size_t k_0__ = 0; k_0__ < dim_sigma_y_0__; ++k_0__) {
            if (jacobian__)
                sigma_y.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                sigma_y.push_back(in__.scalar_lb_constrain(0));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  R;
        (void) R;  // dummy to suppress unused var warning
        if (jacobian__)
            R = in__.corr_matrix_constrain(K,lp__);
        else
            R = in__.corr_matrix_constrain(K);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  S;
        (void) S;  // dummy to suppress unused var warning
        if (jacobian__)
            S = in__.vector_lb_constrain(0,K,lp__);
        else
            S = in__.vector_lb_constrain(0,K);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sigma_beta(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
        (void) sigma_beta;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  lambda_beta(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_beta;  // dummy to suppress unused var warning

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(sigma_beta,DUMMY_VAR__);
        stan::math::fill(lambda_beta,DUMMY_VAR__);

        try {
            current_statement_begin__ = 37;
            stan::math::assign(sigma_beta, quad_form_diag(R,S));
            current_statement_begin__ = 38;
            stan::math::assign(lambda_beta, inverse_spd(sigma_beta));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < K; ++i0__) {
            for (int i1__ = 0; i1__ < K; ++i1__) {
                if (stan::math::is_uninitialized(sigma_beta(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma_beta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < K; ++i0__) {
            for (int i1__ = 0; i1__ < K; ++i1__) {
                if (stan::math::is_uninitialized(lambda_beta(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_beta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        stan::math::check_cov_matrix(function__,"sigma_beta",sigma_beta);
        stan::math::check_cov_matrix(function__,"lambda_beta",lambda_beta);

        // model body
        try {
            current_statement_begin__ = 42;
            for (int g = 1; g <= NG; ++g) {
                current_statement_begin__ = 43;
                lp_accum__.add(inv_gamma_log<propto__>(get_base1(sigma_y,g,"sigma_y",1), tau_prior_alpha, tau_prior_beta));
            }
            current_statement_begin__ = 47;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 49;
                lp_accum__.add(gamma_log<propto__>(get_base1(S,k,"S",1), scale_prior_alpha, scale_prior_beta));
            }
            current_statement_begin__ = 52;
            lp_accum__.add(lkj_corr_log<propto__>(R, lkj_prior_eta));
            current_statement_begin__ = 55;
            lp_accum__.add(multi_normal_log<propto__>(beta, beta_prior_mean, beta_prior_sigma));
            current_statement_begin__ = 57;
            for (int g = 1; g <= NG; ++g) {
                current_statement_begin__ = 58;
                lp_accum__.add(multi_normal_log<propto__>(get_base1(beta_group,g,"beta_group",1), beta, sigma_beta));
                current_statement_begin__ = 59;
                lp_accum__.add(((-(0.5) * ((get_base1(yty,g,"yty",1) - (2 * dot_product(get_base1(ytx,g,"ytx",1),get_base1(beta_group,g,"beta_group",1)))) + quad_form(get_base1(xtx,g,"xtx",1),get_base1(beta_group,g,"beta_group",1)))) - ((0.5 * get_base1(num_obs,g,"num_obs",1)) * log(get_base1(sigma_y,g,"sigma_y",1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_group");
        names__.push_back("beta");
        names__.push_back("sigma_y");
        names__.push_back("R");
        names__.push_back("S");
        names__.push_back("sigma_beta");
        names__.push_back("lambda_beta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(NG);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NG);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "hierarchical_model_spike_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<vector_d> beta_group;
        size_t dim_beta_group_0__ = K;
        for (size_t k_0__ = 0; k_0__ < dim_beta_group_0__; ++k_0__) {
            beta_group.push_back(in__.vector_constrain(NG));
        }
        vector_d beta = in__.vector_constrain(K);
        vector<double> sigma_y;
        size_t dim_sigma_y_0__ = NG;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_y_0__; ++k_0__) {
            sigma_y.push_back(in__.scalar_lb_constrain(0));
        }
        matrix_d R = in__.corr_matrix_constrain(K);
        vector_d S = in__.vector_lb_constrain(0,K);
        for (int k_1__ = 0; k_1__ < NG; ++k_1__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(beta_group[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < NG; ++k_0__) {
            vars__.push_back(sigma_y[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(R(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(S[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        matrix_d sigma_beta(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
        (void) sigma_beta;  // dummy to suppress unused var warning
        matrix_d lambda_beta(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_beta;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 37;
            stan::math::assign(sigma_beta, quad_form_diag(R,S));
            current_statement_begin__ = 38;
            stan::math::assign(lambda_beta, inverse_spd(sigma_beta));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        stan::math::check_cov_matrix(function__,"sigma_beta",sigma_beta);
        stan::math::check_cov_matrix(function__,"lambda_beta",lambda_beta);

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(sigma_beta(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(lambda_beta(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "hierarchical_model_spike_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= NG; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_group" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= NG; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_y" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= NG; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_group" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= NG; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_y" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((K * (K - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= (K + ((K * (K - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (K + ((K * (K - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef hierarchical_model_spike_model_namespace::hierarchical_model_spike_model stan_model;

