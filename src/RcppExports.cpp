// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using Eigen::Map;

using Eigen::MatrixXd;
using Eigen::VectorXd;
using Eigen::MatrixXi;
using Eigen::VectorXi;

using Eigen::Matrix;
using Eigen::Dynamic;
using Eigen::SparseMatrix;

typedef Eigen::Triplet<double> Triplet; // For populating sparse matrices

using namespace Rcpp;

// get_upper_diagonal_index
int get_upper_diagonal_index(int i, int j);
RcppExport SEXP MicroCreditLRVB_get_upper_diagonal_index(SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    __result = Rcpp::wrap(get_upper_diagonal_index(i, j));
    return __result;
END_RCPP
}
// r_mulitvariate_digamma
double r_mulitvariate_digamma(double x, int p);
RcppExport SEXP MicroCreditLRVB_r_mulitvariate_digamma(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    __result = Rcpp::wrap(r_mulitvariate_digamma(x, p));
    return __result;
END_RCPP
}
// GetWishartEntropy
double GetWishartEntropy(const Map<MatrixXd> v_par_r, const double n_par_r);
RcppExport SEXP MicroCreditLRVB_GetWishartEntropy(SEXP v_par_rSEXP, SEXP n_par_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type v_par_r(v_par_rSEXP);
    Rcpp::traits::input_parameter< const double >::type n_par_r(n_par_rSEXP);
    __result = Rcpp::wrap(GetWishartEntropy(v_par_r, n_par_r));
    return __result;
END_RCPP
}
// r_GetELogDetWishart
double r_GetELogDetWishart(const Map<MatrixXd> v_par_r, const double n_par_r);
RcppExport SEXP MicroCreditLRVB_r_GetELogDetWishart(SEXP v_par_rSEXP, SEXP n_par_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type v_par_r(v_par_rSEXP);
    Rcpp::traits::input_parameter< const double >::type n_par_r(n_par_rSEXP);
    __result = Rcpp::wrap(r_GetELogDetWishart(v_par_r, n_par_r));
    return __result;
END_RCPP
}
// ModelGradient
Rcpp::List ModelGradient(const Map<MatrixXd> x, const Map<VectorXd> y, const Map<VectorXi> y_g, const Rcpp::List r_vp, const Rcpp::List r_pp, const bool calculate_hessian, const bool unconstrained);
RcppExport SEXP MicroCreditLRVB_ModelGradient(SEXP xSEXP, SEXP ySEXP, SEXP y_gSEXP, SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP calculate_hessianSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Map<VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Map<VectorXi> >::type y_g(y_gSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const bool >::type calculate_hessian(calculate_hessianSEXP);
    Rcpp::traits::input_parameter< const bool >::type unconstrained(unconstrainedSEXP);
    __result = Rcpp::wrap(ModelGradient(x, y, y_g, r_vp, r_pp, calculate_hessian, unconstrained));
    return __result;
END_RCPP
}
// EncodeLambda
VectorXd EncodeLambda(const Rcpp::List r_vp, int k, int n_g, double lambda_diag_min, double n_min);
RcppExport SEXP MicroCreditLRVB_EncodeLambda(SEXP r_vpSEXP, SEXP kSEXP, SEXP n_gSEXP, SEXP lambda_diag_minSEXP, SEXP n_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n_g(n_gSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_diag_min(lambda_diag_minSEXP);
    Rcpp::traits::input_parameter< double >::type n_min(n_minSEXP);
    __result = Rcpp::wrap(EncodeLambda(r_vp, k, n_g, lambda_diag_min, n_min));
    return __result;
END_RCPP
}
// DecodeLambda
Rcpp::List DecodeLambda(const VectorXd theta, int k, int n_g, double lambda_diag_min, double n_min);
RcppExport SEXP MicroCreditLRVB_DecodeLambda(SEXP thetaSEXP, SEXP kSEXP, SEXP n_gSEXP, SEXP lambda_diag_minSEXP, SEXP n_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n_g(n_gSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_diag_min(lambda_diag_minSEXP);
    Rcpp::traits::input_parameter< double >::type n_min(n_minSEXP);
    __result = Rcpp::wrap(DecodeLambda(theta, k, n_g, lambda_diag_min, n_min));
    return __result;
END_RCPP
}
// DecodeParameters
Rcpp::List DecodeParameters(const VectorXd theta, const Rcpp::List r_vp, const Rcpp::List r_pp, const bool unconstrained_wishart);
RcppExport SEXP MicroCreditLRVB_DecodeParameters(SEXP thetaSEXP, SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP unconstrained_wishartSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const bool >::type unconstrained_wishart(unconstrained_wishartSEXP);
    __result = Rcpp::wrap(DecodeParameters(theta, r_vp, r_pp, unconstrained_wishart));
    return __result;
END_RCPP
}
// LambdaGradient
Rcpp::List LambdaGradient(const Map<MatrixXd> x, const Map<VectorXd> y, const Map<VectorXi> y_g, const Rcpp::List r_vp, const Rcpp::List r_pp, const bool unconstrained);
RcppExport SEXP MicroCreditLRVB_LambdaGradient(SEXP xSEXP, SEXP ySEXP, SEXP y_gSEXP, SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Map<VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Map<VectorXi> >::type y_g(y_gSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const bool >::type unconstrained(unconstrainedSEXP);
    __result = Rcpp::wrap(LambdaGradient(x, y, y_g, r_vp, r_pp, unconstrained));
    return __result;
END_RCPP
}
// LambdaEntropyDerivs
Rcpp::List LambdaEntropyDerivs(const Map<MatrixXd> x, const Map<VectorXd> y, const Map<VectorXi> y_g, const Rcpp::List r_vp, const Rcpp::List r_pp, const bool unconstrained);
RcppExport SEXP MicroCreditLRVB_LambdaEntropyDerivs(SEXP xSEXP, SEXP ySEXP, SEXP y_gSEXP, SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Map<VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Map<VectorXi> >::type y_g(y_gSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const bool >::type unconstrained(unconstrainedSEXP);
    __result = Rcpp::wrap(LambdaEntropyDerivs(x, y, y_g, r_vp, r_pp, unconstrained));
    return __result;
END_RCPP
}
// LambdaLikelihoodMomentDerivs
Rcpp::List LambdaLikelihoodMomentDerivs(const Map<MatrixXd> x, const Map<VectorXd> y, const Map<VectorXi> y_g, const Rcpp::List r_vp, const Rcpp::List r_pp, const bool unconstrained);
RcppExport SEXP MicroCreditLRVB_LambdaLikelihoodMomentDerivs(SEXP xSEXP, SEXP ySEXP, SEXP y_gSEXP, SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Map<VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Map<VectorXi> >::type y_g(y_gSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const bool >::type unconstrained(unconstrainedSEXP);
    __result = Rcpp::wrap(LambdaLikelihoodMomentDerivs(x, y, y_g, r_vp, r_pp, unconstrained));
    return __result;
END_RCPP
}
// WishartMomentParameterizationJacobian
Rcpp::List WishartMomentParameterizationJacobian(const Rcpp::List r_vp, const Rcpp::List r_pp, const bool unconstrained);
RcppExport SEXP MicroCreditLRVB_WishartMomentParameterizationJacobian(SEXP r_vpSEXP, SEXP r_ppSEXP, SEXP unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    Rcpp::traits::input_parameter< const bool >::type unconstrained(unconstrainedSEXP);
    __result = Rcpp::wrap(WishartMomentParameterizationJacobian(r_vp, r_pp, unconstrained));
    return __result;
END_RCPP
}
// TestJacobian
Rcpp::List TestJacobian();
RcppExport SEXP MicroCreditLRVB_TestJacobian() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(TestJacobian());
    return __result;
END_RCPP
}
// PriorSensitivity
Rcpp::List PriorSensitivity(const Rcpp::List r_vp, const Rcpp::List r_pp);
RcppExport SEXP MicroCreditLRVB_PriorSensitivity(SEXP r_vpSEXP, SEXP r_ppSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    __result = Rcpp::wrap(PriorSensitivity(r_vp, r_pp));
    return __result;
END_RCPP
}
// GetParameterEncoder
Rcpp::List GetParameterEncoder(const Rcpp::List r_vp, const Rcpp::List r_pp);
RcppExport SEXP MicroCreditLRVB_GetParameterEncoder(SEXP r_vpSEXP, SEXP r_ppSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    __result = Rcpp::wrap(GetParameterEncoder(r_vp, r_pp));
    return __result;
END_RCPP
}
// GetPriorParameterEncoder
Rcpp::List GetPriorParameterEncoder(const Rcpp::List r_pp);
RcppExport SEXP MicroCreditLRVB_GetPriorParameterEncoder(SEXP r_ppSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    __result = Rcpp::wrap(GetPriorParameterEncoder(r_pp));
    return __result;
END_RCPP
}
// GetModelParameterEncoder
Rcpp::List GetModelParameterEncoder(const Rcpp::List r_vp, const Rcpp::List r_pp);
RcppExport SEXP MicroCreditLRVB_GetModelParameterEncoder(SEXP r_vpSEXP, SEXP r_ppSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_vp(r_vpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    __result = Rcpp::wrap(GetModelParameterEncoder(r_vp, r_pp));
    return __result;
END_RCPP
}
// GetVariationalCovariance
SparseMatrix<double> GetVariationalCovariance(const Rcpp::List vp_params, const Rcpp::List r_pp);
RcppExport SEXP MicroCreditLRVB_GetVariationalCovariance(SEXP vp_paramsSEXP, SEXP r_ppSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::List >::type vp_params(vp_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_pp(r_ppSEXP);
    __result = Rcpp::wrap(GetVariationalCovariance(vp_params, r_pp));
    return __result;
END_RCPP
}
